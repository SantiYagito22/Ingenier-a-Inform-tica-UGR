/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})

public class combinada implements org.apache.thrift.TBase<combinada, combinada._Fields>, java.io.Serializable, Cloneable, Comparable<combinada> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("combinada");

  private static final org.apache.thrift.protocol.TField NUMS_FIELD_DESC = new org.apache.thrift.protocol.TField("nums", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField OP_FIELD_DESC = new org.apache.thrift.protocol.TField("op", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new combinadaStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new combinadaTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<Double> nums; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<String> op; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUMS((short)1, "nums"),
    OP((short)2, "op");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUMS
          return NUMS;
        case 2: // OP
          return OP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUMS, new org.apache.thrift.meta_data.FieldMetaData("nums", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.OP, new org.apache.thrift.meta_data.FieldMetaData("op", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(combinada.class, metaDataMap);
  }

  public combinada() {
  }

  public combinada(
    java.util.List<Double> nums,
    java.util.List<String> op)
  {
    this();
    this.nums = nums;
    this.op = op;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public combinada(combinada other) {
    if (other.isSetNums()) {
      java.util.List<Double> __this__nums = new java.util.ArrayList<Double>(other.nums);
      this.nums = __this__nums;
    }
    if (other.isSetOp()) {
      java.util.List<String> __this__op = new java.util.ArrayList<String>(other.op);
      this.op = __this__op;
    }
  }

  public combinada deepCopy() {
    return new combinada(this);
  }

  @Override
  public void clear() {
    this.nums = null;
    this.op = null;
  }

  public int getNumsSize() {
    return (this.nums == null) ? 0 : this.nums.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<Double> getNumsIterator() {
    return (this.nums == null) ? null : this.nums.iterator();
  }

  public void addToNums(double elem) {
    if (this.nums == null) {
      this.nums = new java.util.ArrayList<Double>();
    }
    this.nums.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<Double> getNums() {
    return this.nums;
  }

  public combinada setNums(@org.apache.thrift.annotation.Nullable java.util.List<Double> nums) {
    this.nums = nums;
    return this;
  }

  public void unsetNums() {
    this.nums = null;
  }

  /** Returns true if field nums is set (has been assigned a value) and false otherwise */
  public boolean isSetNums() {
    return this.nums != null;
  }

  public void setNumsIsSet(boolean value) {
    if (!value) {
      this.nums = null;
    }
  }

  public int getOpSize() {
    return (this.op == null) ? 0 : this.op.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<String> getOpIterator() {
    return (this.op == null) ? null : this.op.iterator();
  }

  public void addToOp(String elem) {
    if (this.op == null) {
      this.op = new java.util.ArrayList<String>();
    }
    this.op.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<String> getOp() {
    return this.op;
  }

  public combinada setOp(@org.apache.thrift.annotation.Nullable java.util.List<String> op) {
    this.op = op;
    return this;
  }

  public void unsetOp() {
    this.op = null;
  }

  /** Returns true if field op is set (has been assigned a value) and false otherwise */
  public boolean isSetOp() {
    return this.op != null;
  }

  public void setOpIsSet(boolean value) {
    if (!value) {
      this.op = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case NUMS:
      if (value == null) {
        unsetNums();
      } else {
        setNums((java.util.List<Double>)value);
      }
      break;

    case OP:
      if (value == null) {
        unsetOp();
      } else {
        setOp((java.util.List<String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUMS:
      return getNums();

    case OP:
      return getOp();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUMS:
      return isSetNums();
    case OP:
      return isSetOp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof combinada)
      return this.equals((combinada)that);
    return false;
  }

  public boolean equals(combinada that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_nums = true && this.isSetNums();
    boolean that_present_nums = true && that.isSetNums();
    if (this_present_nums || that_present_nums) {
      if (!(this_present_nums && that_present_nums))
        return false;
      if (!this.nums.equals(that.nums))
        return false;
    }

    boolean this_present_op = true && this.isSetOp();
    boolean that_present_op = true && that.isSetOp();
    if (this_present_op || that_present_op) {
      if (!(this_present_op && that_present_op))
        return false;
      if (!this.op.equals(that.op))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNums()) ? 131071 : 524287);
    if (isSetNums())
      hashCode = hashCode * 8191 + nums.hashCode();

    hashCode = hashCode * 8191 + ((isSetOp()) ? 131071 : 524287);
    if (isSetOp())
      hashCode = hashCode * 8191 + op.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(combinada other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNums()).compareTo(other.isSetNums());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNums()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nums, other.nums);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOp()).compareTo(other.isSetOp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.op, other.op);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("combinada(");
    boolean first = true;

    sb.append("nums:");
    if (this.nums == null) {
      sb.append("null");
    } else {
      sb.append(this.nums);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("op:");
    if (this.op == null) {
      sb.append("null");
    } else {
      sb.append(this.op);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class combinadaStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public combinadaStandardScheme getScheme() {
      return new combinadaStandardScheme();
    }
  }

  private static class combinadaStandardScheme extends org.apache.thrift.scheme.StandardScheme<combinada> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, combinada struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.nums = new java.util.ArrayList<Double>(_list16.size);
                double _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = iprot.readDouble();
                  struct.nums.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setNumsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OP
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.op = new java.util.ArrayList<String>(_list19.size);
                @org.apache.thrift.annotation.Nullable String _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = iprot.readString();
                  struct.op.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setOpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, combinada struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.nums != null) {
        oprot.writeFieldBegin(NUMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.nums.size()));
          for (double _iter22 : struct.nums)
          {
            oprot.writeDouble(_iter22);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.op != null) {
        oprot.writeFieldBegin(OP_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.op.size()));
          for (String _iter23 : struct.op)
          {
            oprot.writeString(_iter23);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class combinadaTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public combinadaTupleScheme getScheme() {
      return new combinadaTupleScheme();
    }
  }

  private static class combinadaTupleScheme extends org.apache.thrift.scheme.TupleScheme<combinada> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, combinada struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNums()) {
        optionals.set(0);
      }
      if (struct.isSetOp()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetNums()) {
        {
          oprot.writeI32(struct.nums.size());
          for (double _iter24 : struct.nums)
          {
            oprot.writeDouble(_iter24);
          }
        }
      }
      if (struct.isSetOp()) {
        {
          oprot.writeI32(struct.op.size());
          for (String _iter25 : struct.op)
          {
            oprot.writeString(_iter25);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, combinada struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.nums = new java.util.ArrayList<Double>(_list26.size);
          double _elem27;
          for (int _i28 = 0; _i28 < _list26.size; ++_i28)
          {
            _elem27 = iprot.readDouble();
            struct.nums.add(_elem27);
          }
        }
        struct.setNumsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.op = new java.util.ArrayList<String>(_list29.size);
          @org.apache.thrift.annotation.Nullable String _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = iprot.readString();
            struct.op.add(_elem30);
          }
        }
        struct.setOpIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

