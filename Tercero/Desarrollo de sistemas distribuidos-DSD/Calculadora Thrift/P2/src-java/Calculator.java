/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})

public class Calculator {

  public interface Iface {

    public double suma(operacionBasica oB) throws org.apache.thrift.TException;

    public double resta(operacionBasica oB) throws org.apache.thrift.TException;

    public double multiplicacion(operacionBasica oB) throws org.apache.thrift.TException;

    public double division(operacionBasica oB) throws operacionInvalida, org.apache.thrift.TException;

    public java.util.List<Double> sumaVectores(operacionVectores oV) throws operacionInvalida, org.apache.thrift.TException;

    public java.util.List<Double> restaVectores(operacionVectores oV) throws operacionInvalida, org.apache.thrift.TException;

    public java.util.List<Double> multiplicacionVectores(operacionVectores oV) throws operacionInvalida, org.apache.thrift.TException;

    public java.util.List<Double> divisionVectores(operacionVectores oV) throws operacionInvalida, org.apache.thrift.TException;

    public java.util.List<Double> ecuacionCuadratica(segundoGrado sg) throws operacionInvalida, org.apache.thrift.TException;

    public double operacionCombinada(combinada cb) throws operacionInvalida, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void suma(operacionBasica oB, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws org.apache.thrift.TException;

    public void resta(operacionBasica oB, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws org.apache.thrift.TException;

    public void multiplicacion(operacionBasica oB, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws org.apache.thrift.TException;

    public void division(operacionBasica oB, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws org.apache.thrift.TException;

    public void sumaVectores(operacionVectores oV, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> resultHandler) throws org.apache.thrift.TException;

    public void restaVectores(operacionVectores oV, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> resultHandler) throws org.apache.thrift.TException;

    public void multiplicacionVectores(operacionVectores oV, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> resultHandler) throws org.apache.thrift.TException;

    public void divisionVectores(operacionVectores oV, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> resultHandler) throws org.apache.thrift.TException;

    public void ecuacionCuadratica(segundoGrado sg, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> resultHandler) throws org.apache.thrift.TException;

    public void operacionCombinada(combinada cb, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public double suma(operacionBasica oB) throws org.apache.thrift.TException
    {
      send_suma(oB);
      return recv_suma();
    }

    public void send_suma(operacionBasica oB) throws org.apache.thrift.TException
    {
      suma_args args = new suma_args();
      args.setOB(oB);
      sendBase("suma", args);
    }

    public double recv_suma() throws org.apache.thrift.TException
    {
      suma_result result = new suma_result();
      receiveBase(result, "suma");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "suma failed: unknown result");
    }

    public double resta(operacionBasica oB) throws org.apache.thrift.TException
    {
      send_resta(oB);
      return recv_resta();
    }

    public void send_resta(operacionBasica oB) throws org.apache.thrift.TException
    {
      resta_args args = new resta_args();
      args.setOB(oB);
      sendBase("resta", args);
    }

    public double recv_resta() throws org.apache.thrift.TException
    {
      resta_result result = new resta_result();
      receiveBase(result, "resta");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "resta failed: unknown result");
    }

    public double multiplicacion(operacionBasica oB) throws org.apache.thrift.TException
    {
      send_multiplicacion(oB);
      return recv_multiplicacion();
    }

    public void send_multiplicacion(operacionBasica oB) throws org.apache.thrift.TException
    {
      multiplicacion_args args = new multiplicacion_args();
      args.setOB(oB);
      sendBase("multiplicacion", args);
    }

    public double recv_multiplicacion() throws org.apache.thrift.TException
    {
      multiplicacion_result result = new multiplicacion_result();
      receiveBase(result, "multiplicacion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "multiplicacion failed: unknown result");
    }

    public double division(operacionBasica oB) throws operacionInvalida, org.apache.thrift.TException
    {
      send_division(oB);
      return recv_division();
    }

    public void send_division(operacionBasica oB) throws org.apache.thrift.TException
    {
      division_args args = new division_args();
      args.setOB(oB);
      sendBase("division", args);
    }

    public double recv_division() throws operacionInvalida, org.apache.thrift.TException
    {
      division_result result = new division_result();
      receiveBase(result, "division");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oI != null) {
        throw result.oI;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "division failed: unknown result");
    }

    public java.util.List<Double> sumaVectores(operacionVectores oV) throws operacionInvalida, org.apache.thrift.TException
    {
      send_sumaVectores(oV);
      return recv_sumaVectores();
    }

    public void send_sumaVectores(operacionVectores oV) throws org.apache.thrift.TException
    {
      sumaVectores_args args = new sumaVectores_args();
      args.setOV(oV);
      sendBase("sumaVectores", args);
    }

    public java.util.List<Double> recv_sumaVectores() throws operacionInvalida, org.apache.thrift.TException
    {
      sumaVectores_result result = new sumaVectores_result();
      receiveBase(result, "sumaVectores");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oI != null) {
        throw result.oI;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sumaVectores failed: unknown result");
    }

    public java.util.List<Double> restaVectores(operacionVectores oV) throws operacionInvalida, org.apache.thrift.TException
    {
      send_restaVectores(oV);
      return recv_restaVectores();
    }

    public void send_restaVectores(operacionVectores oV) throws org.apache.thrift.TException
    {
      restaVectores_args args = new restaVectores_args();
      args.setOV(oV);
      sendBase("restaVectores", args);
    }

    public java.util.List<Double> recv_restaVectores() throws operacionInvalida, org.apache.thrift.TException
    {
      restaVectores_result result = new restaVectores_result();
      receiveBase(result, "restaVectores");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oI != null) {
        throw result.oI;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "restaVectores failed: unknown result");
    }

    public java.util.List<Double> multiplicacionVectores(operacionVectores oV) throws operacionInvalida, org.apache.thrift.TException
    {
      send_multiplicacionVectores(oV);
      return recv_multiplicacionVectores();
    }

    public void send_multiplicacionVectores(operacionVectores oV) throws org.apache.thrift.TException
    {
      multiplicacionVectores_args args = new multiplicacionVectores_args();
      args.setOV(oV);
      sendBase("multiplicacionVectores", args);
    }

    public java.util.List<Double> recv_multiplicacionVectores() throws operacionInvalida, org.apache.thrift.TException
    {
      multiplicacionVectores_result result = new multiplicacionVectores_result();
      receiveBase(result, "multiplicacionVectores");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oI != null) {
        throw result.oI;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "multiplicacionVectores failed: unknown result");
    }

    public java.util.List<Double> divisionVectores(operacionVectores oV) throws operacionInvalida, org.apache.thrift.TException
    {
      send_divisionVectores(oV);
      return recv_divisionVectores();
    }

    public void send_divisionVectores(operacionVectores oV) throws org.apache.thrift.TException
    {
      divisionVectores_args args = new divisionVectores_args();
      args.setOV(oV);
      sendBase("divisionVectores", args);
    }

    public java.util.List<Double> recv_divisionVectores() throws operacionInvalida, org.apache.thrift.TException
    {
      divisionVectores_result result = new divisionVectores_result();
      receiveBase(result, "divisionVectores");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oI != null) {
        throw result.oI;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "divisionVectores failed: unknown result");
    }

    public java.util.List<Double> ecuacionCuadratica(segundoGrado sg) throws operacionInvalida, org.apache.thrift.TException
    {
      send_ecuacionCuadratica(sg);
      return recv_ecuacionCuadratica();
    }

    public void send_ecuacionCuadratica(segundoGrado sg) throws org.apache.thrift.TException
    {
      ecuacionCuadratica_args args = new ecuacionCuadratica_args();
      args.setSg(sg);
      sendBase("ecuacionCuadratica", args);
    }

    public java.util.List<Double> recv_ecuacionCuadratica() throws operacionInvalida, org.apache.thrift.TException
    {
      ecuacionCuadratica_result result = new ecuacionCuadratica_result();
      receiveBase(result, "ecuacionCuadratica");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oI != null) {
        throw result.oI;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ecuacionCuadratica failed: unknown result");
    }

    public double operacionCombinada(combinada cb) throws operacionInvalida, org.apache.thrift.TException
    {
      send_operacionCombinada(cb);
      return recv_operacionCombinada();
    }

    public void send_operacionCombinada(combinada cb) throws org.apache.thrift.TException
    {
      operacionCombinada_args args = new operacionCombinada_args();
      args.setCb(cb);
      sendBase("operacionCombinada", args);
    }

    public double recv_operacionCombinada() throws operacionInvalida, org.apache.thrift.TException
    {
      operacionCombinada_result result = new operacionCombinada_result();
      receiveBase(result, "operacionCombinada");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.oI != null) {
        throw result.oI;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "operacionCombinada failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void suma(operacionBasica oB, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      suma_call method_call = new suma_call(oB, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class suma_call extends org.apache.thrift.async.TAsyncMethodCall<Double> {
      private operacionBasica oB;
      public suma_call(operacionBasica oB, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.oB = oB;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("suma", org.apache.thrift.protocol.TMessageType.CALL, 0));
        suma_args args = new suma_args();
        args.setOB(oB);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_suma();
      }
    }

    public void resta(operacionBasica oB, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resta_call method_call = new resta_call(oB, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resta_call extends org.apache.thrift.async.TAsyncMethodCall<Double> {
      private operacionBasica oB;
      public resta_call(operacionBasica oB, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.oB = oB;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resta", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resta_args args = new resta_args();
        args.setOB(oB);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_resta();
      }
    }

    public void multiplicacion(operacionBasica oB, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multiplicacion_call method_call = new multiplicacion_call(oB, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multiplicacion_call extends org.apache.thrift.async.TAsyncMethodCall<Double> {
      private operacionBasica oB;
      public multiplicacion_call(operacionBasica oB, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.oB = oB;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multiplicacion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        multiplicacion_args args = new multiplicacion_args();
        args.setOB(oB);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_multiplicacion();
      }
    }

    public void division(operacionBasica oB, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      division_call method_call = new division_call(oB, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class division_call extends org.apache.thrift.async.TAsyncMethodCall<Double> {
      private operacionBasica oB;
      public division_call(operacionBasica oB, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.oB = oB;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("division", org.apache.thrift.protocol.TMessageType.CALL, 0));
        division_args args = new division_args();
        args.setOB(oB);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Double getResult() throws operacionInvalida, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_division();
      }
    }

    public void sumaVectores(operacionVectores oV, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sumaVectores_call method_call = new sumaVectores_call(oV, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sumaVectores_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Double>> {
      private operacionVectores oV;
      public sumaVectores_call(operacionVectores oV, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.oV = oV;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sumaVectores", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sumaVectores_args args = new sumaVectores_args();
        args.setOV(oV);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Double> getResult() throws operacionInvalida, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sumaVectores();
      }
    }

    public void restaVectores(operacionVectores oV, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      restaVectores_call method_call = new restaVectores_call(oV, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class restaVectores_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Double>> {
      private operacionVectores oV;
      public restaVectores_call(operacionVectores oV, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.oV = oV;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("restaVectores", org.apache.thrift.protocol.TMessageType.CALL, 0));
        restaVectores_args args = new restaVectores_args();
        args.setOV(oV);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Double> getResult() throws operacionInvalida, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_restaVectores();
      }
    }

    public void multiplicacionVectores(operacionVectores oV, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multiplicacionVectores_call method_call = new multiplicacionVectores_call(oV, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class multiplicacionVectores_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Double>> {
      private operacionVectores oV;
      public multiplicacionVectores_call(operacionVectores oV, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.oV = oV;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multiplicacionVectores", org.apache.thrift.protocol.TMessageType.CALL, 0));
        multiplicacionVectores_args args = new multiplicacionVectores_args();
        args.setOV(oV);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Double> getResult() throws operacionInvalida, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_multiplicacionVectores();
      }
    }

    public void divisionVectores(operacionVectores oV, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      divisionVectores_call method_call = new divisionVectores_call(oV, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class divisionVectores_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Double>> {
      private operacionVectores oV;
      public divisionVectores_call(operacionVectores oV, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.oV = oV;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("divisionVectores", org.apache.thrift.protocol.TMessageType.CALL, 0));
        divisionVectores_args args = new divisionVectores_args();
        args.setOV(oV);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Double> getResult() throws operacionInvalida, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_divisionVectores();
      }
    }

    public void ecuacionCuadratica(segundoGrado sg, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ecuacionCuadratica_call method_call = new ecuacionCuadratica_call(sg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ecuacionCuadratica_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Double>> {
      private segundoGrado sg;
      public ecuacionCuadratica_call(segundoGrado sg, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sg = sg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ecuacionCuadratica", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ecuacionCuadratica_args args = new ecuacionCuadratica_args();
        args.setSg(sg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Double> getResult() throws operacionInvalida, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ecuacionCuadratica();
      }
    }

    public void operacionCombinada(combinada cb, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      operacionCombinada_call method_call = new operacionCombinada_call(cb, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class operacionCombinada_call extends org.apache.thrift.async.TAsyncMethodCall<Double> {
      private combinada cb;
      public operacionCombinada_call(combinada cb, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cb = cb;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("operacionCombinada", org.apache.thrift.protocol.TMessageType.CALL, 0));
        operacionCombinada_args args = new operacionCombinada_args();
        args.setCb(cb);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Double getResult() throws operacionInvalida, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_operacionCombinada();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("suma", new suma());
      processMap.put("resta", new resta());
      processMap.put("multiplicacion", new multiplicacion());
      processMap.put("division", new division());
      processMap.put("sumaVectores", new sumaVectores());
      processMap.put("restaVectores", new restaVectores());
      processMap.put("multiplicacionVectores", new multiplicacionVectores());
      processMap.put("divisionVectores", new divisionVectores());
      processMap.put("ecuacionCuadratica", new ecuacionCuadratica());
      processMap.put("operacionCombinada", new operacionCombinada());
      return processMap;
    }

    public static class suma<I extends Iface> extends org.apache.thrift.ProcessFunction<I, suma_args> {
      public suma() {
        super("suma");
      }

      public suma_args getEmptyArgsInstance() {
        return new suma_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public suma_result getResult(I iface, suma_args args) throws org.apache.thrift.TException {
        suma_result result = new suma_result();
        result.success = iface.suma(args.oB);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class resta<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resta_args> {
      public resta() {
        super("resta");
      }

      public resta_args getEmptyArgsInstance() {
        return new resta_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public resta_result getResult(I iface, resta_args args) throws org.apache.thrift.TException {
        resta_result result = new resta_result();
        result.success = iface.resta(args.oB);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class multiplicacion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, multiplicacion_args> {
      public multiplicacion() {
        super("multiplicacion");
      }

      public multiplicacion_args getEmptyArgsInstance() {
        return new multiplicacion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public multiplicacion_result getResult(I iface, multiplicacion_args args) throws org.apache.thrift.TException {
        multiplicacion_result result = new multiplicacion_result();
        result.success = iface.multiplicacion(args.oB);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class division<I extends Iface> extends org.apache.thrift.ProcessFunction<I, division_args> {
      public division() {
        super("division");
      }

      public division_args getEmptyArgsInstance() {
        return new division_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public division_result getResult(I iface, division_args args) throws org.apache.thrift.TException {
        division_result result = new division_result();
        try {
          result.success = iface.division(args.oB);
          result.setSuccessIsSet(true);
        } catch (operacionInvalida oI) {
          result.oI = oI;
        }
        return result;
      }
    }

    public static class sumaVectores<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sumaVectores_args> {
      public sumaVectores() {
        super("sumaVectores");
      }

      public sumaVectores_args getEmptyArgsInstance() {
        return new sumaVectores_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public sumaVectores_result getResult(I iface, sumaVectores_args args) throws org.apache.thrift.TException {
        sumaVectores_result result = new sumaVectores_result();
        try {
          result.success = iface.sumaVectores(args.oV);
        } catch (operacionInvalida oI) {
          result.oI = oI;
        }
        return result;
      }
    }

    public static class restaVectores<I extends Iface> extends org.apache.thrift.ProcessFunction<I, restaVectores_args> {
      public restaVectores() {
        super("restaVectores");
      }

      public restaVectores_args getEmptyArgsInstance() {
        return new restaVectores_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public restaVectores_result getResult(I iface, restaVectores_args args) throws org.apache.thrift.TException {
        restaVectores_result result = new restaVectores_result();
        try {
          result.success = iface.restaVectores(args.oV);
        } catch (operacionInvalida oI) {
          result.oI = oI;
        }
        return result;
      }
    }

    public static class multiplicacionVectores<I extends Iface> extends org.apache.thrift.ProcessFunction<I, multiplicacionVectores_args> {
      public multiplicacionVectores() {
        super("multiplicacionVectores");
      }

      public multiplicacionVectores_args getEmptyArgsInstance() {
        return new multiplicacionVectores_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public multiplicacionVectores_result getResult(I iface, multiplicacionVectores_args args) throws org.apache.thrift.TException {
        multiplicacionVectores_result result = new multiplicacionVectores_result();
        try {
          result.success = iface.multiplicacionVectores(args.oV);
        } catch (operacionInvalida oI) {
          result.oI = oI;
        }
        return result;
      }
    }

    public static class divisionVectores<I extends Iface> extends org.apache.thrift.ProcessFunction<I, divisionVectores_args> {
      public divisionVectores() {
        super("divisionVectores");
      }

      public divisionVectores_args getEmptyArgsInstance() {
        return new divisionVectores_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public divisionVectores_result getResult(I iface, divisionVectores_args args) throws org.apache.thrift.TException {
        divisionVectores_result result = new divisionVectores_result();
        try {
          result.success = iface.divisionVectores(args.oV);
        } catch (operacionInvalida oI) {
          result.oI = oI;
        }
        return result;
      }
    }

    public static class ecuacionCuadratica<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ecuacionCuadratica_args> {
      public ecuacionCuadratica() {
        super("ecuacionCuadratica");
      }

      public ecuacionCuadratica_args getEmptyArgsInstance() {
        return new ecuacionCuadratica_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public ecuacionCuadratica_result getResult(I iface, ecuacionCuadratica_args args) throws org.apache.thrift.TException {
        ecuacionCuadratica_result result = new ecuacionCuadratica_result();
        try {
          result.success = iface.ecuacionCuadratica(args.sg);
        } catch (operacionInvalida oI) {
          result.oI = oI;
        }
        return result;
      }
    }

    public static class operacionCombinada<I extends Iface> extends org.apache.thrift.ProcessFunction<I, operacionCombinada_args> {
      public operacionCombinada() {
        super("operacionCombinada");
      }

      public operacionCombinada_args getEmptyArgsInstance() {
        return new operacionCombinada_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public operacionCombinada_result getResult(I iface, operacionCombinada_args args) throws org.apache.thrift.TException {
        operacionCombinada_result result = new operacionCombinada_result();
        try {
          result.success = iface.operacionCombinada(args.cb);
          result.setSuccessIsSet(true);
        } catch (operacionInvalida oI) {
          result.oI = oI;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("suma", new suma());
      processMap.put("resta", new resta());
      processMap.put("multiplicacion", new multiplicacion());
      processMap.put("division", new division());
      processMap.put("sumaVectores", new sumaVectores());
      processMap.put("restaVectores", new restaVectores());
      processMap.put("multiplicacionVectores", new multiplicacionVectores());
      processMap.put("divisionVectores", new divisionVectores());
      processMap.put("ecuacionCuadratica", new ecuacionCuadratica());
      processMap.put("operacionCombinada", new operacionCombinada());
      return processMap;
    }

    public static class suma<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, suma_args, Double> {
      public suma() {
        super("suma");
      }

      public suma_args getEmptyArgsInstance() {
        return new suma_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Double> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Double>() {
          public void onComplete(Double o) {
            suma_result result = new suma_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            suma_result result = new suma_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, suma_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws org.apache.thrift.TException {
        iface.suma(args.oB,resultHandler);
      }
    }

    public static class resta<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resta_args, Double> {
      public resta() {
        super("resta");
      }

      public resta_args getEmptyArgsInstance() {
        return new resta_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Double> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Double>() {
          public void onComplete(Double o) {
            resta_result result = new resta_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            resta_result result = new resta_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, resta_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws org.apache.thrift.TException {
        iface.resta(args.oB,resultHandler);
      }
    }

    public static class multiplicacion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, multiplicacion_args, Double> {
      public multiplicacion() {
        super("multiplicacion");
      }

      public multiplicacion_args getEmptyArgsInstance() {
        return new multiplicacion_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Double> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Double>() {
          public void onComplete(Double o) {
            multiplicacion_result result = new multiplicacion_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            multiplicacion_result result = new multiplicacion_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, multiplicacion_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws org.apache.thrift.TException {
        iface.multiplicacion(args.oB,resultHandler);
      }
    }

    public static class division<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, division_args, Double> {
      public division() {
        super("division");
      }

      public division_args getEmptyArgsInstance() {
        return new division_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Double> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Double>() {
          public void onComplete(Double o) {
            division_result result = new division_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            division_result result = new division_result();
            if (e instanceof operacionInvalida) {
              result.oI = (operacionInvalida) e;
              result.setOIIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, division_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws org.apache.thrift.TException {
        iface.division(args.oB,resultHandler);
      }
    }

    public static class sumaVectores<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sumaVectores_args, java.util.List<Double>> {
      public sumaVectores() {
        super("sumaVectores");
      }

      public sumaVectores_args getEmptyArgsInstance() {
        return new sumaVectores_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>>() {
          public void onComplete(java.util.List<Double> o) {
            sumaVectores_result result = new sumaVectores_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sumaVectores_result result = new sumaVectores_result();
            if (e instanceof operacionInvalida) {
              result.oI = (operacionInvalida) e;
              result.setOIIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sumaVectores_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> resultHandler) throws org.apache.thrift.TException {
        iface.sumaVectores(args.oV,resultHandler);
      }
    }

    public static class restaVectores<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, restaVectores_args, java.util.List<Double>> {
      public restaVectores() {
        super("restaVectores");
      }

      public restaVectores_args getEmptyArgsInstance() {
        return new restaVectores_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>>() {
          public void onComplete(java.util.List<Double> o) {
            restaVectores_result result = new restaVectores_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            restaVectores_result result = new restaVectores_result();
            if (e instanceof operacionInvalida) {
              result.oI = (operacionInvalida) e;
              result.setOIIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, restaVectores_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> resultHandler) throws org.apache.thrift.TException {
        iface.restaVectores(args.oV,resultHandler);
      }
    }

    public static class multiplicacionVectores<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, multiplicacionVectores_args, java.util.List<Double>> {
      public multiplicacionVectores() {
        super("multiplicacionVectores");
      }

      public multiplicacionVectores_args getEmptyArgsInstance() {
        return new multiplicacionVectores_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>>() {
          public void onComplete(java.util.List<Double> o) {
            multiplicacionVectores_result result = new multiplicacionVectores_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            multiplicacionVectores_result result = new multiplicacionVectores_result();
            if (e instanceof operacionInvalida) {
              result.oI = (operacionInvalida) e;
              result.setOIIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, multiplicacionVectores_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> resultHandler) throws org.apache.thrift.TException {
        iface.multiplicacionVectores(args.oV,resultHandler);
      }
    }

    public static class divisionVectores<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, divisionVectores_args, java.util.List<Double>> {
      public divisionVectores() {
        super("divisionVectores");
      }

      public divisionVectores_args getEmptyArgsInstance() {
        return new divisionVectores_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>>() {
          public void onComplete(java.util.List<Double> o) {
            divisionVectores_result result = new divisionVectores_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            divisionVectores_result result = new divisionVectores_result();
            if (e instanceof operacionInvalida) {
              result.oI = (operacionInvalida) e;
              result.setOIIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, divisionVectores_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> resultHandler) throws org.apache.thrift.TException {
        iface.divisionVectores(args.oV,resultHandler);
      }
    }

    public static class ecuacionCuadratica<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ecuacionCuadratica_args, java.util.List<Double>> {
      public ecuacionCuadratica() {
        super("ecuacionCuadratica");
      }

      public ecuacionCuadratica_args getEmptyArgsInstance() {
        return new ecuacionCuadratica_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>>() {
          public void onComplete(java.util.List<Double> o) {
            ecuacionCuadratica_result result = new ecuacionCuadratica_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ecuacionCuadratica_result result = new ecuacionCuadratica_result();
            if (e instanceof operacionInvalida) {
              result.oI = (operacionInvalida) e;
              result.setOIIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ecuacionCuadratica_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Double>> resultHandler) throws org.apache.thrift.TException {
        iface.ecuacionCuadratica(args.sg,resultHandler);
      }
    }

    public static class operacionCombinada<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, operacionCombinada_args, Double> {
      public operacionCombinada() {
        super("operacionCombinada");
      }

      public operacionCombinada_args getEmptyArgsInstance() {
        return new operacionCombinada_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Double> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Double>() {
          public void onComplete(Double o) {
            operacionCombinada_result result = new operacionCombinada_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            operacionCombinada_result result = new operacionCombinada_result();
            if (e instanceof operacionInvalida) {
              result.oI = (operacionInvalida) e;
              result.setOIIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, operacionCombinada_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws org.apache.thrift.TException {
        iface.operacionCombinada(args.cb,resultHandler);
      }
    }

  }

  public static class suma_args implements org.apache.thrift.TBase<suma_args, suma_args._Fields>, java.io.Serializable, Cloneable, Comparable<suma_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("suma_args");

    private static final org.apache.thrift.protocol.TField O_B_FIELD_DESC = new org.apache.thrift.protocol.TField("oB", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new suma_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new suma_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable operacionBasica oB; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      O_B((short)1, "oB");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // O_B
            return O_B;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.O_B, new org.apache.thrift.meta_data.FieldMetaData("oB", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, operacionBasica.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(suma_args.class, metaDataMap);
    }

    public suma_args() {
    }

    public suma_args(
      operacionBasica oB)
    {
      this();
      this.oB = oB;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public suma_args(suma_args other) {
      if (other.isSetOB()) {
        this.oB = new operacionBasica(other.oB);
      }
    }

    public suma_args deepCopy() {
      return new suma_args(this);
    }

    @Override
    public void clear() {
      this.oB = null;
    }

    @org.apache.thrift.annotation.Nullable
    public operacionBasica getOB() {
      return this.oB;
    }

    public suma_args setOB(@org.apache.thrift.annotation.Nullable operacionBasica oB) {
      this.oB = oB;
      return this;
    }

    public void unsetOB() {
      this.oB = null;
    }

    /** Returns true if field oB is set (has been assigned a value) and false otherwise */
    public boolean isSetOB() {
      return this.oB != null;
    }

    public void setOBIsSet(boolean value) {
      if (!value) {
        this.oB = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case O_B:
        if (value == null) {
          unsetOB();
        } else {
          setOB((operacionBasica)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case O_B:
        return getOB();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case O_B:
        return isSetOB();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof suma_args)
        return this.equals((suma_args)that);
      return false;
    }

    public boolean equals(suma_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_oB = true && this.isSetOB();
      boolean that_present_oB = true && that.isSetOB();
      if (this_present_oB || that_present_oB) {
        if (!(this_present_oB && that_present_oB))
          return false;
        if (!this.oB.equals(that.oB))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetOB()) ? 131071 : 524287);
      if (isSetOB())
        hashCode = hashCode * 8191 + oB.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(suma_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOB()).compareTo(other.isSetOB());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOB()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oB, other.oB);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("suma_args(");
      boolean first = true;

      sb.append("oB:");
      if (this.oB == null) {
        sb.append("null");
      } else {
        sb.append(this.oB);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (oB != null) {
        oB.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class suma_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public suma_argsStandardScheme getScheme() {
        return new suma_argsStandardScheme();
      }
    }

    private static class suma_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<suma_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, suma_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // O_B
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oB = new operacionBasica();
                struct.oB.read(iprot);
                struct.setOBIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, suma_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oB != null) {
          oprot.writeFieldBegin(O_B_FIELD_DESC);
          struct.oB.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class suma_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public suma_argsTupleScheme getScheme() {
        return new suma_argsTupleScheme();
      }
    }

    private static class suma_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<suma_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, suma_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetOB()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOB()) {
          struct.oB.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, suma_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.oB = new operacionBasica();
          struct.oB.read(iprot);
          struct.setOBIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class suma_result implements org.apache.thrift.TBase<suma_result, suma_result._Fields>, java.io.Serializable, Cloneable, Comparable<suma_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("suma_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new suma_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new suma_resultTupleSchemeFactory();

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(suma_result.class, metaDataMap);
    }

    public suma_result() {
    }

    public suma_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public suma_result(suma_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public suma_result deepCopy() {
      return new suma_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public suma_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof suma_result)
        return this.equals((suma_result)that);
      return false;
    }

    public boolean equals(suma_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(suma_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("suma_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class suma_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public suma_resultStandardScheme getScheme() {
        return new suma_resultStandardScheme();
      }
    }

    private static class suma_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<suma_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, suma_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, suma_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class suma_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public suma_resultTupleScheme getScheme() {
        return new suma_resultTupleScheme();
      }
    }

    private static class suma_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<suma_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, suma_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, suma_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class resta_args implements org.apache.thrift.TBase<resta_args, resta_args._Fields>, java.io.Serializable, Cloneable, Comparable<resta_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resta_args");

    private static final org.apache.thrift.protocol.TField O_B_FIELD_DESC = new org.apache.thrift.protocol.TField("oB", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new resta_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new resta_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable operacionBasica oB; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      O_B((short)1, "oB");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // O_B
            return O_B;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.O_B, new org.apache.thrift.meta_data.FieldMetaData("oB", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, operacionBasica.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resta_args.class, metaDataMap);
    }

    public resta_args() {
    }

    public resta_args(
      operacionBasica oB)
    {
      this();
      this.oB = oB;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resta_args(resta_args other) {
      if (other.isSetOB()) {
        this.oB = new operacionBasica(other.oB);
      }
    }

    public resta_args deepCopy() {
      return new resta_args(this);
    }

    @Override
    public void clear() {
      this.oB = null;
    }

    @org.apache.thrift.annotation.Nullable
    public operacionBasica getOB() {
      return this.oB;
    }

    public resta_args setOB(@org.apache.thrift.annotation.Nullable operacionBasica oB) {
      this.oB = oB;
      return this;
    }

    public void unsetOB() {
      this.oB = null;
    }

    /** Returns true if field oB is set (has been assigned a value) and false otherwise */
    public boolean isSetOB() {
      return this.oB != null;
    }

    public void setOBIsSet(boolean value) {
      if (!value) {
        this.oB = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case O_B:
        if (value == null) {
          unsetOB();
        } else {
          setOB((operacionBasica)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case O_B:
        return getOB();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case O_B:
        return isSetOB();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resta_args)
        return this.equals((resta_args)that);
      return false;
    }

    public boolean equals(resta_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_oB = true && this.isSetOB();
      boolean that_present_oB = true && that.isSetOB();
      if (this_present_oB || that_present_oB) {
        if (!(this_present_oB && that_present_oB))
          return false;
        if (!this.oB.equals(that.oB))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetOB()) ? 131071 : 524287);
      if (isSetOB())
        hashCode = hashCode * 8191 + oB.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(resta_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOB()).compareTo(other.isSetOB());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOB()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oB, other.oB);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resta_args(");
      boolean first = true;

      sb.append("oB:");
      if (this.oB == null) {
        sb.append("null");
      } else {
        sb.append(this.oB);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (oB != null) {
        oB.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resta_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public resta_argsStandardScheme getScheme() {
        return new resta_argsStandardScheme();
      }
    }

    private static class resta_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<resta_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // O_B
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oB = new operacionBasica();
                struct.oB.read(iprot);
                struct.setOBIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resta_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oB != null) {
          oprot.writeFieldBegin(O_B_FIELD_DESC);
          struct.oB.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resta_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public resta_argsTupleScheme getScheme() {
        return new resta_argsTupleScheme();
      }
    }

    private static class resta_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<resta_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetOB()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOB()) {
          struct.oB.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resta_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.oB = new operacionBasica();
          struct.oB.read(iprot);
          struct.setOBIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class resta_result implements org.apache.thrift.TBase<resta_result, resta_result._Fields>, java.io.Serializable, Cloneable, Comparable<resta_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resta_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new resta_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new resta_resultTupleSchemeFactory();

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resta_result.class, metaDataMap);
    }

    public resta_result() {
    }

    public resta_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resta_result(resta_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public resta_result deepCopy() {
      return new resta_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public resta_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resta_result)
        return this.equals((resta_result)that);
      return false;
    }

    public boolean equals(resta_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(resta_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resta_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resta_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public resta_resultStandardScheme getScheme() {
        return new resta_resultStandardScheme();
      }
    }

    private static class resta_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<resta_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resta_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resta_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public resta_resultTupleScheme getScheme() {
        return new resta_resultTupleScheme();
      }
    }

    private static class resta_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<resta_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resta_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class multiplicacion_args implements org.apache.thrift.TBase<multiplicacion_args, multiplicacion_args._Fields>, java.io.Serializable, Cloneable, Comparable<multiplicacion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multiplicacion_args");

    private static final org.apache.thrift.protocol.TField O_B_FIELD_DESC = new org.apache.thrift.protocol.TField("oB", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new multiplicacion_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new multiplicacion_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable operacionBasica oB; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      O_B((short)1, "oB");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // O_B
            return O_B;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.O_B, new org.apache.thrift.meta_data.FieldMetaData("oB", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, operacionBasica.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multiplicacion_args.class, metaDataMap);
    }

    public multiplicacion_args() {
    }

    public multiplicacion_args(
      operacionBasica oB)
    {
      this();
      this.oB = oB;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiplicacion_args(multiplicacion_args other) {
      if (other.isSetOB()) {
        this.oB = new operacionBasica(other.oB);
      }
    }

    public multiplicacion_args deepCopy() {
      return new multiplicacion_args(this);
    }

    @Override
    public void clear() {
      this.oB = null;
    }

    @org.apache.thrift.annotation.Nullable
    public operacionBasica getOB() {
      return this.oB;
    }

    public multiplicacion_args setOB(@org.apache.thrift.annotation.Nullable operacionBasica oB) {
      this.oB = oB;
      return this;
    }

    public void unsetOB() {
      this.oB = null;
    }

    /** Returns true if field oB is set (has been assigned a value) and false otherwise */
    public boolean isSetOB() {
      return this.oB != null;
    }

    public void setOBIsSet(boolean value) {
      if (!value) {
        this.oB = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case O_B:
        if (value == null) {
          unsetOB();
        } else {
          setOB((operacionBasica)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case O_B:
        return getOB();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case O_B:
        return isSetOB();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiplicacion_args)
        return this.equals((multiplicacion_args)that);
      return false;
    }

    public boolean equals(multiplicacion_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_oB = true && this.isSetOB();
      boolean that_present_oB = true && that.isSetOB();
      if (this_present_oB || that_present_oB) {
        if (!(this_present_oB && that_present_oB))
          return false;
        if (!this.oB.equals(that.oB))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetOB()) ? 131071 : 524287);
      if (isSetOB())
        hashCode = hashCode * 8191 + oB.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(multiplicacion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOB()).compareTo(other.isSetOB());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOB()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oB, other.oB);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiplicacion_args(");
      boolean first = true;

      sb.append("oB:");
      if (this.oB == null) {
        sb.append("null");
      } else {
        sb.append(this.oB);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (oB != null) {
        oB.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multiplicacion_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multiplicacion_argsStandardScheme getScheme() {
        return new multiplicacion_argsStandardScheme();
      }
    }

    private static class multiplicacion_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<multiplicacion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multiplicacion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // O_B
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oB = new operacionBasica();
                struct.oB.read(iprot);
                struct.setOBIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multiplicacion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oB != null) {
          oprot.writeFieldBegin(O_B_FIELD_DESC);
          struct.oB.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multiplicacion_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multiplicacion_argsTupleScheme getScheme() {
        return new multiplicacion_argsTupleScheme();
      }
    }

    private static class multiplicacion_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<multiplicacion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multiplicacion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetOB()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOB()) {
          struct.oB.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multiplicacion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.oB = new operacionBasica();
          struct.oB.read(iprot);
          struct.setOBIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class multiplicacion_result implements org.apache.thrift.TBase<multiplicacion_result, multiplicacion_result._Fields>, java.io.Serializable, Cloneable, Comparable<multiplicacion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multiplicacion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new multiplicacion_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new multiplicacion_resultTupleSchemeFactory();

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multiplicacion_result.class, metaDataMap);
    }

    public multiplicacion_result() {
    }

    public multiplicacion_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiplicacion_result(multiplicacion_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public multiplicacion_result deepCopy() {
      return new multiplicacion_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public multiplicacion_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiplicacion_result)
        return this.equals((multiplicacion_result)that);
      return false;
    }

    public boolean equals(multiplicacion_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(multiplicacion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiplicacion_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multiplicacion_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multiplicacion_resultStandardScheme getScheme() {
        return new multiplicacion_resultStandardScheme();
      }
    }

    private static class multiplicacion_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<multiplicacion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multiplicacion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multiplicacion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multiplicacion_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multiplicacion_resultTupleScheme getScheme() {
        return new multiplicacion_resultTupleScheme();
      }
    }

    private static class multiplicacion_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<multiplicacion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multiplicacion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multiplicacion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class division_args implements org.apache.thrift.TBase<division_args, division_args._Fields>, java.io.Serializable, Cloneable, Comparable<division_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("division_args");

    private static final org.apache.thrift.protocol.TField O_B_FIELD_DESC = new org.apache.thrift.protocol.TField("oB", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new division_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new division_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable operacionBasica oB; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      O_B((short)1, "oB");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // O_B
            return O_B;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.O_B, new org.apache.thrift.meta_data.FieldMetaData("oB", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, operacionBasica.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(division_args.class, metaDataMap);
    }

    public division_args() {
    }

    public division_args(
      operacionBasica oB)
    {
      this();
      this.oB = oB;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public division_args(division_args other) {
      if (other.isSetOB()) {
        this.oB = new operacionBasica(other.oB);
      }
    }

    public division_args deepCopy() {
      return new division_args(this);
    }

    @Override
    public void clear() {
      this.oB = null;
    }

    @org.apache.thrift.annotation.Nullable
    public operacionBasica getOB() {
      return this.oB;
    }

    public division_args setOB(@org.apache.thrift.annotation.Nullable operacionBasica oB) {
      this.oB = oB;
      return this;
    }

    public void unsetOB() {
      this.oB = null;
    }

    /** Returns true if field oB is set (has been assigned a value) and false otherwise */
    public boolean isSetOB() {
      return this.oB != null;
    }

    public void setOBIsSet(boolean value) {
      if (!value) {
        this.oB = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case O_B:
        if (value == null) {
          unsetOB();
        } else {
          setOB((operacionBasica)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case O_B:
        return getOB();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case O_B:
        return isSetOB();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof division_args)
        return this.equals((division_args)that);
      return false;
    }

    public boolean equals(division_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_oB = true && this.isSetOB();
      boolean that_present_oB = true && that.isSetOB();
      if (this_present_oB || that_present_oB) {
        if (!(this_present_oB && that_present_oB))
          return false;
        if (!this.oB.equals(that.oB))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetOB()) ? 131071 : 524287);
      if (isSetOB())
        hashCode = hashCode * 8191 + oB.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(division_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOB()).compareTo(other.isSetOB());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOB()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oB, other.oB);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("division_args(");
      boolean first = true;

      sb.append("oB:");
      if (this.oB == null) {
        sb.append("null");
      } else {
        sb.append(this.oB);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (oB != null) {
        oB.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class division_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public division_argsStandardScheme getScheme() {
        return new division_argsStandardScheme();
      }
    }

    private static class division_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<division_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, division_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // O_B
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oB = new operacionBasica();
                struct.oB.read(iprot);
                struct.setOBIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, division_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oB != null) {
          oprot.writeFieldBegin(O_B_FIELD_DESC);
          struct.oB.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class division_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public division_argsTupleScheme getScheme() {
        return new division_argsTupleScheme();
      }
    }

    private static class division_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<division_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, division_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetOB()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOB()) {
          struct.oB.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, division_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.oB = new operacionBasica();
          struct.oB.read(iprot);
          struct.setOBIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class division_result implements org.apache.thrift.TBase<division_result, division_result._Fields>, java.io.Serializable, Cloneable, Comparable<division_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("division_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);
    private static final org.apache.thrift.protocol.TField O_I_FIELD_DESC = new org.apache.thrift.protocol.TField("oI", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new division_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new division_resultTupleSchemeFactory();

    public double success; // required
    public @org.apache.thrift.annotation.Nullable operacionInvalida oI; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      O_I((short)1, "oI");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // O_I
            return O_I;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.O_I, new org.apache.thrift.meta_data.FieldMetaData("oI", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, operacionInvalida.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(division_result.class, metaDataMap);
    }

    public division_result() {
    }

    public division_result(
      double success,
      operacionInvalida oI)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.oI = oI;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public division_result(division_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetOI()) {
        this.oI = new operacionInvalida(other.oI);
      }
    }

    public division_result deepCopy() {
      return new division_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
      this.oI = null;
    }

    public double getSuccess() {
      return this.success;
    }

    public division_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public operacionInvalida getOI() {
      return this.oI;
    }

    public division_result setOI(@org.apache.thrift.annotation.Nullable operacionInvalida oI) {
      this.oI = oI;
      return this;
    }

    public void unsetOI() {
      this.oI = null;
    }

    /** Returns true if field oI is set (has been assigned a value) and false otherwise */
    public boolean isSetOI() {
      return this.oI != null;
    }

    public void setOIIsSet(boolean value) {
      if (!value) {
        this.oI = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      case O_I:
        if (value == null) {
          unsetOI();
        } else {
          setOI((operacionInvalida)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case O_I:
        return getOI();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case O_I:
        return isSetOI();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof division_result)
        return this.equals((division_result)that);
      return false;
    }

    public boolean equals(division_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_oI = true && this.isSetOI();
      boolean that_present_oI = true && that.isSetOI();
      if (this_present_oI || that_present_oI) {
        if (!(this_present_oI && that_present_oI))
          return false;
        if (!this.oI.equals(that.oI))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      hashCode = hashCode * 8191 + ((isSetOI()) ? 131071 : 524287);
      if (isSetOI())
        hashCode = hashCode * 8191 + oI.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(division_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOI()).compareTo(other.isSetOI());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOI()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oI, other.oI);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("division_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("oI:");
      if (this.oI == null) {
        sb.append("null");
      } else {
        sb.append(this.oI);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class division_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public division_resultStandardScheme getScheme() {
        return new division_resultStandardScheme();
      }
    }

    private static class division_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<division_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, division_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // O_I
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oI = new operacionInvalida();
                struct.oI.read(iprot);
                struct.setOIIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, division_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.oI != null) {
          oprot.writeFieldBegin(O_I_FIELD_DESC);
          struct.oI.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class division_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public division_resultTupleScheme getScheme() {
        return new division_resultTupleScheme();
      }
    }

    private static class division_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<division_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, division_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOI()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
        if (struct.isSetOI()) {
          struct.oI.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, division_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oI = new operacionInvalida();
          struct.oI.read(iprot);
          struct.setOIIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sumaVectores_args implements org.apache.thrift.TBase<sumaVectores_args, sumaVectores_args._Fields>, java.io.Serializable, Cloneable, Comparable<sumaVectores_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sumaVectores_args");

    private static final org.apache.thrift.protocol.TField O_V_FIELD_DESC = new org.apache.thrift.protocol.TField("oV", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sumaVectores_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sumaVectores_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable operacionVectores oV; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      O_V((short)1, "oV");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // O_V
            return O_V;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.O_V, new org.apache.thrift.meta_data.FieldMetaData("oV", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, operacionVectores.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sumaVectores_args.class, metaDataMap);
    }

    public sumaVectores_args() {
    }

    public sumaVectores_args(
      operacionVectores oV)
    {
      this();
      this.oV = oV;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sumaVectores_args(sumaVectores_args other) {
      if (other.isSetOV()) {
        this.oV = new operacionVectores(other.oV);
      }
    }

    public sumaVectores_args deepCopy() {
      return new sumaVectores_args(this);
    }

    @Override
    public void clear() {
      this.oV = null;
    }

    @org.apache.thrift.annotation.Nullable
    public operacionVectores getOV() {
      return this.oV;
    }

    public sumaVectores_args setOV(@org.apache.thrift.annotation.Nullable operacionVectores oV) {
      this.oV = oV;
      return this;
    }

    public void unsetOV() {
      this.oV = null;
    }

    /** Returns true if field oV is set (has been assigned a value) and false otherwise */
    public boolean isSetOV() {
      return this.oV != null;
    }

    public void setOVIsSet(boolean value) {
      if (!value) {
        this.oV = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case O_V:
        if (value == null) {
          unsetOV();
        } else {
          setOV((operacionVectores)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case O_V:
        return getOV();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case O_V:
        return isSetOV();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sumaVectores_args)
        return this.equals((sumaVectores_args)that);
      return false;
    }

    public boolean equals(sumaVectores_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_oV = true && this.isSetOV();
      boolean that_present_oV = true && that.isSetOV();
      if (this_present_oV || that_present_oV) {
        if (!(this_present_oV && that_present_oV))
          return false;
        if (!this.oV.equals(that.oV))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetOV()) ? 131071 : 524287);
      if (isSetOV())
        hashCode = hashCode * 8191 + oV.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sumaVectores_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOV()).compareTo(other.isSetOV());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOV()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oV, other.oV);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sumaVectores_args(");
      boolean first = true;

      sb.append("oV:");
      if (this.oV == null) {
        sb.append("null");
      } else {
        sb.append(this.oV);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (oV != null) {
        oV.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sumaVectores_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sumaVectores_argsStandardScheme getScheme() {
        return new sumaVectores_argsStandardScheme();
      }
    }

    private static class sumaVectores_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sumaVectores_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sumaVectores_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // O_V
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oV = new operacionVectores();
                struct.oV.read(iprot);
                struct.setOVIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sumaVectores_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oV != null) {
          oprot.writeFieldBegin(O_V_FIELD_DESC);
          struct.oV.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sumaVectores_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sumaVectores_argsTupleScheme getScheme() {
        return new sumaVectores_argsTupleScheme();
      }
    }

    private static class sumaVectores_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sumaVectores_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sumaVectores_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetOV()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOV()) {
          struct.oV.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sumaVectores_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.oV = new operacionVectores();
          struct.oV.read(iprot);
          struct.setOVIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sumaVectores_result implements org.apache.thrift.TBase<sumaVectores_result, sumaVectores_result._Fields>, java.io.Serializable, Cloneable, Comparable<sumaVectores_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sumaVectores_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField O_I_FIELD_DESC = new org.apache.thrift.protocol.TField("oI", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sumaVectores_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sumaVectores_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Double> success; // required
    public @org.apache.thrift.annotation.Nullable operacionInvalida oI; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      O_I((short)1, "oI");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // O_I
            return O_I;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      tmpMap.put(_Fields.O_I, new org.apache.thrift.meta_data.FieldMetaData("oI", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, operacionInvalida.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sumaVectores_result.class, metaDataMap);
    }

    public sumaVectores_result() {
    }

    public sumaVectores_result(
      java.util.List<Double> success,
      operacionInvalida oI)
    {
      this();
      this.success = success;
      this.oI = oI;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sumaVectores_result(sumaVectores_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Double> __this__success = new java.util.ArrayList<Double>(other.success);
        this.success = __this__success;
      }
      if (other.isSetOI()) {
        this.oI = new operacionInvalida(other.oI);
      }
    }

    public sumaVectores_result deepCopy() {
      return new sumaVectores_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oI = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Double> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(double elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Double>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Double> getSuccess() {
      return this.success;
    }

    public sumaVectores_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public operacionInvalida getOI() {
      return this.oI;
    }

    public sumaVectores_result setOI(@org.apache.thrift.annotation.Nullable operacionInvalida oI) {
      this.oI = oI;
      return this;
    }

    public void unsetOI() {
      this.oI = null;
    }

    /** Returns true if field oI is set (has been assigned a value) and false otherwise */
    public boolean isSetOI() {
      return this.oI != null;
    }

    public void setOIIsSet(boolean value) {
      if (!value) {
        this.oI = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Double>)value);
        }
        break;

      case O_I:
        if (value == null) {
          unsetOI();
        } else {
          setOI((operacionInvalida)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case O_I:
        return getOI();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case O_I:
        return isSetOI();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sumaVectores_result)
        return this.equals((sumaVectores_result)that);
      return false;
    }

    public boolean equals(sumaVectores_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oI = true && this.isSetOI();
      boolean that_present_oI = true && that.isSetOI();
      if (this_present_oI || that_present_oI) {
        if (!(this_present_oI && that_present_oI))
          return false;
        if (!this.oI.equals(that.oI))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetOI()) ? 131071 : 524287);
      if (isSetOI())
        hashCode = hashCode * 8191 + oI.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sumaVectores_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOI()).compareTo(other.isSetOI());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOI()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oI, other.oI);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sumaVectores_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oI:");
      if (this.oI == null) {
        sb.append("null");
      } else {
        sb.append(this.oI);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sumaVectores_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sumaVectores_resultStandardScheme getScheme() {
        return new sumaVectores_resultStandardScheme();
      }
    }

    private static class sumaVectores_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sumaVectores_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sumaVectores_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Double>(_list32.size);
                  double _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = iprot.readDouble();
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // O_I
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oI = new operacionInvalida();
                struct.oI.read(iprot);
                struct.setOIIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sumaVectores_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (double _iter35 : struct.success)
            {
              oprot.writeDouble(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.oI != null) {
          oprot.writeFieldBegin(O_I_FIELD_DESC);
          struct.oI.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sumaVectores_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sumaVectores_resultTupleScheme getScheme() {
        return new sumaVectores_resultTupleScheme();
      }
    }

    private static class sumaVectores_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sumaVectores_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sumaVectores_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOI()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (double _iter36 : struct.success)
            {
              oprot.writeDouble(_iter36);
            }
          }
        }
        if (struct.isSetOI()) {
          struct.oI.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sumaVectores_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new java.util.ArrayList<Double>(_list37.size);
            double _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = iprot.readDouble();
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oI = new operacionInvalida();
          struct.oI.read(iprot);
          struct.setOIIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class restaVectores_args implements org.apache.thrift.TBase<restaVectores_args, restaVectores_args._Fields>, java.io.Serializable, Cloneable, Comparable<restaVectores_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restaVectores_args");

    private static final org.apache.thrift.protocol.TField O_V_FIELD_DESC = new org.apache.thrift.protocol.TField("oV", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new restaVectores_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new restaVectores_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable operacionVectores oV; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      O_V((short)1, "oV");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // O_V
            return O_V;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.O_V, new org.apache.thrift.meta_data.FieldMetaData("oV", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, operacionVectores.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restaVectores_args.class, metaDataMap);
    }

    public restaVectores_args() {
    }

    public restaVectores_args(
      operacionVectores oV)
    {
      this();
      this.oV = oV;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public restaVectores_args(restaVectores_args other) {
      if (other.isSetOV()) {
        this.oV = new operacionVectores(other.oV);
      }
    }

    public restaVectores_args deepCopy() {
      return new restaVectores_args(this);
    }

    @Override
    public void clear() {
      this.oV = null;
    }

    @org.apache.thrift.annotation.Nullable
    public operacionVectores getOV() {
      return this.oV;
    }

    public restaVectores_args setOV(@org.apache.thrift.annotation.Nullable operacionVectores oV) {
      this.oV = oV;
      return this;
    }

    public void unsetOV() {
      this.oV = null;
    }

    /** Returns true if field oV is set (has been assigned a value) and false otherwise */
    public boolean isSetOV() {
      return this.oV != null;
    }

    public void setOVIsSet(boolean value) {
      if (!value) {
        this.oV = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case O_V:
        if (value == null) {
          unsetOV();
        } else {
          setOV((operacionVectores)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case O_V:
        return getOV();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case O_V:
        return isSetOV();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof restaVectores_args)
        return this.equals((restaVectores_args)that);
      return false;
    }

    public boolean equals(restaVectores_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_oV = true && this.isSetOV();
      boolean that_present_oV = true && that.isSetOV();
      if (this_present_oV || that_present_oV) {
        if (!(this_present_oV && that_present_oV))
          return false;
        if (!this.oV.equals(that.oV))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetOV()) ? 131071 : 524287);
      if (isSetOV())
        hashCode = hashCode * 8191 + oV.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(restaVectores_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOV()).compareTo(other.isSetOV());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOV()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oV, other.oV);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("restaVectores_args(");
      boolean first = true;

      sb.append("oV:");
      if (this.oV == null) {
        sb.append("null");
      } else {
        sb.append(this.oV);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (oV != null) {
        oV.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class restaVectores_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public restaVectores_argsStandardScheme getScheme() {
        return new restaVectores_argsStandardScheme();
      }
    }

    private static class restaVectores_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<restaVectores_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, restaVectores_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // O_V
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oV = new operacionVectores();
                struct.oV.read(iprot);
                struct.setOVIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, restaVectores_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oV != null) {
          oprot.writeFieldBegin(O_V_FIELD_DESC);
          struct.oV.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class restaVectores_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public restaVectores_argsTupleScheme getScheme() {
        return new restaVectores_argsTupleScheme();
      }
    }

    private static class restaVectores_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<restaVectores_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, restaVectores_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetOV()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOV()) {
          struct.oV.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, restaVectores_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.oV = new operacionVectores();
          struct.oV.read(iprot);
          struct.setOVIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class restaVectores_result implements org.apache.thrift.TBase<restaVectores_result, restaVectores_result._Fields>, java.io.Serializable, Cloneable, Comparable<restaVectores_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restaVectores_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField O_I_FIELD_DESC = new org.apache.thrift.protocol.TField("oI", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new restaVectores_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new restaVectores_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Double> success; // required
    public @org.apache.thrift.annotation.Nullable operacionInvalida oI; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      O_I((short)1, "oI");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // O_I
            return O_I;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      tmpMap.put(_Fields.O_I, new org.apache.thrift.meta_data.FieldMetaData("oI", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, operacionInvalida.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restaVectores_result.class, metaDataMap);
    }

    public restaVectores_result() {
    }

    public restaVectores_result(
      java.util.List<Double> success,
      operacionInvalida oI)
    {
      this();
      this.success = success;
      this.oI = oI;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public restaVectores_result(restaVectores_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Double> __this__success = new java.util.ArrayList<Double>(other.success);
        this.success = __this__success;
      }
      if (other.isSetOI()) {
        this.oI = new operacionInvalida(other.oI);
      }
    }

    public restaVectores_result deepCopy() {
      return new restaVectores_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oI = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Double> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(double elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Double>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Double> getSuccess() {
      return this.success;
    }

    public restaVectores_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public operacionInvalida getOI() {
      return this.oI;
    }

    public restaVectores_result setOI(@org.apache.thrift.annotation.Nullable operacionInvalida oI) {
      this.oI = oI;
      return this;
    }

    public void unsetOI() {
      this.oI = null;
    }

    /** Returns true if field oI is set (has been assigned a value) and false otherwise */
    public boolean isSetOI() {
      return this.oI != null;
    }

    public void setOIIsSet(boolean value) {
      if (!value) {
        this.oI = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Double>)value);
        }
        break;

      case O_I:
        if (value == null) {
          unsetOI();
        } else {
          setOI((operacionInvalida)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case O_I:
        return getOI();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case O_I:
        return isSetOI();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof restaVectores_result)
        return this.equals((restaVectores_result)that);
      return false;
    }

    public boolean equals(restaVectores_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oI = true && this.isSetOI();
      boolean that_present_oI = true && that.isSetOI();
      if (this_present_oI || that_present_oI) {
        if (!(this_present_oI && that_present_oI))
          return false;
        if (!this.oI.equals(that.oI))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetOI()) ? 131071 : 524287);
      if (isSetOI())
        hashCode = hashCode * 8191 + oI.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(restaVectores_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOI()).compareTo(other.isSetOI());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOI()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oI, other.oI);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("restaVectores_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oI:");
      if (this.oI == null) {
        sb.append("null");
      } else {
        sb.append(this.oI);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class restaVectores_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public restaVectores_resultStandardScheme getScheme() {
        return new restaVectores_resultStandardScheme();
      }
    }

    private static class restaVectores_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<restaVectores_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, restaVectores_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Double>(_list40.size);
                  double _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = iprot.readDouble();
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // O_I
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oI = new operacionInvalida();
                struct.oI.read(iprot);
                struct.setOIIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, restaVectores_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (double _iter43 : struct.success)
            {
              oprot.writeDouble(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.oI != null) {
          oprot.writeFieldBegin(O_I_FIELD_DESC);
          struct.oI.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class restaVectores_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public restaVectores_resultTupleScheme getScheme() {
        return new restaVectores_resultTupleScheme();
      }
    }

    private static class restaVectores_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<restaVectores_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, restaVectores_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOI()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (double _iter44 : struct.success)
            {
              oprot.writeDouble(_iter44);
            }
          }
        }
        if (struct.isSetOI()) {
          struct.oI.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, restaVectores_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new java.util.ArrayList<Double>(_list45.size);
            double _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = iprot.readDouble();
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oI = new operacionInvalida();
          struct.oI.read(iprot);
          struct.setOIIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class multiplicacionVectores_args implements org.apache.thrift.TBase<multiplicacionVectores_args, multiplicacionVectores_args._Fields>, java.io.Serializable, Cloneable, Comparable<multiplicacionVectores_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multiplicacionVectores_args");

    private static final org.apache.thrift.protocol.TField O_V_FIELD_DESC = new org.apache.thrift.protocol.TField("oV", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new multiplicacionVectores_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new multiplicacionVectores_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable operacionVectores oV; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      O_V((short)1, "oV");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // O_V
            return O_V;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.O_V, new org.apache.thrift.meta_data.FieldMetaData("oV", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, operacionVectores.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multiplicacionVectores_args.class, metaDataMap);
    }

    public multiplicacionVectores_args() {
    }

    public multiplicacionVectores_args(
      operacionVectores oV)
    {
      this();
      this.oV = oV;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiplicacionVectores_args(multiplicacionVectores_args other) {
      if (other.isSetOV()) {
        this.oV = new operacionVectores(other.oV);
      }
    }

    public multiplicacionVectores_args deepCopy() {
      return new multiplicacionVectores_args(this);
    }

    @Override
    public void clear() {
      this.oV = null;
    }

    @org.apache.thrift.annotation.Nullable
    public operacionVectores getOV() {
      return this.oV;
    }

    public multiplicacionVectores_args setOV(@org.apache.thrift.annotation.Nullable operacionVectores oV) {
      this.oV = oV;
      return this;
    }

    public void unsetOV() {
      this.oV = null;
    }

    /** Returns true if field oV is set (has been assigned a value) and false otherwise */
    public boolean isSetOV() {
      return this.oV != null;
    }

    public void setOVIsSet(boolean value) {
      if (!value) {
        this.oV = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case O_V:
        if (value == null) {
          unsetOV();
        } else {
          setOV((operacionVectores)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case O_V:
        return getOV();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case O_V:
        return isSetOV();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiplicacionVectores_args)
        return this.equals((multiplicacionVectores_args)that);
      return false;
    }

    public boolean equals(multiplicacionVectores_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_oV = true && this.isSetOV();
      boolean that_present_oV = true && that.isSetOV();
      if (this_present_oV || that_present_oV) {
        if (!(this_present_oV && that_present_oV))
          return false;
        if (!this.oV.equals(that.oV))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetOV()) ? 131071 : 524287);
      if (isSetOV())
        hashCode = hashCode * 8191 + oV.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(multiplicacionVectores_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOV()).compareTo(other.isSetOV());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOV()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oV, other.oV);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiplicacionVectores_args(");
      boolean first = true;

      sb.append("oV:");
      if (this.oV == null) {
        sb.append("null");
      } else {
        sb.append(this.oV);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (oV != null) {
        oV.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multiplicacionVectores_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multiplicacionVectores_argsStandardScheme getScheme() {
        return new multiplicacionVectores_argsStandardScheme();
      }
    }

    private static class multiplicacionVectores_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<multiplicacionVectores_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multiplicacionVectores_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // O_V
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oV = new operacionVectores();
                struct.oV.read(iprot);
                struct.setOVIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multiplicacionVectores_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oV != null) {
          oprot.writeFieldBegin(O_V_FIELD_DESC);
          struct.oV.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multiplicacionVectores_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multiplicacionVectores_argsTupleScheme getScheme() {
        return new multiplicacionVectores_argsTupleScheme();
      }
    }

    private static class multiplicacionVectores_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<multiplicacionVectores_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multiplicacionVectores_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetOV()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOV()) {
          struct.oV.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multiplicacionVectores_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.oV = new operacionVectores();
          struct.oV.read(iprot);
          struct.setOVIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class multiplicacionVectores_result implements org.apache.thrift.TBase<multiplicacionVectores_result, multiplicacionVectores_result._Fields>, java.io.Serializable, Cloneable, Comparable<multiplicacionVectores_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("multiplicacionVectores_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField O_I_FIELD_DESC = new org.apache.thrift.protocol.TField("oI", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new multiplicacionVectores_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new multiplicacionVectores_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Double> success; // required
    public @org.apache.thrift.annotation.Nullable operacionInvalida oI; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      O_I((short)1, "oI");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // O_I
            return O_I;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      tmpMap.put(_Fields.O_I, new org.apache.thrift.meta_data.FieldMetaData("oI", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, operacionInvalida.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(multiplicacionVectores_result.class, metaDataMap);
    }

    public multiplicacionVectores_result() {
    }

    public multiplicacionVectores_result(
      java.util.List<Double> success,
      operacionInvalida oI)
    {
      this();
      this.success = success;
      this.oI = oI;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiplicacionVectores_result(multiplicacionVectores_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Double> __this__success = new java.util.ArrayList<Double>(other.success);
        this.success = __this__success;
      }
      if (other.isSetOI()) {
        this.oI = new operacionInvalida(other.oI);
      }
    }

    public multiplicacionVectores_result deepCopy() {
      return new multiplicacionVectores_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oI = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Double> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(double elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Double>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Double> getSuccess() {
      return this.success;
    }

    public multiplicacionVectores_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public operacionInvalida getOI() {
      return this.oI;
    }

    public multiplicacionVectores_result setOI(@org.apache.thrift.annotation.Nullable operacionInvalida oI) {
      this.oI = oI;
      return this;
    }

    public void unsetOI() {
      this.oI = null;
    }

    /** Returns true if field oI is set (has been assigned a value) and false otherwise */
    public boolean isSetOI() {
      return this.oI != null;
    }

    public void setOIIsSet(boolean value) {
      if (!value) {
        this.oI = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Double>)value);
        }
        break;

      case O_I:
        if (value == null) {
          unsetOI();
        } else {
          setOI((operacionInvalida)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case O_I:
        return getOI();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case O_I:
        return isSetOI();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiplicacionVectores_result)
        return this.equals((multiplicacionVectores_result)that);
      return false;
    }

    public boolean equals(multiplicacionVectores_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oI = true && this.isSetOI();
      boolean that_present_oI = true && that.isSetOI();
      if (this_present_oI || that_present_oI) {
        if (!(this_present_oI && that_present_oI))
          return false;
        if (!this.oI.equals(that.oI))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetOI()) ? 131071 : 524287);
      if (isSetOI())
        hashCode = hashCode * 8191 + oI.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(multiplicacionVectores_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOI()).compareTo(other.isSetOI());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOI()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oI, other.oI);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("multiplicacionVectores_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oI:");
      if (this.oI == null) {
        sb.append("null");
      } else {
        sb.append(this.oI);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class multiplicacionVectores_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multiplicacionVectores_resultStandardScheme getScheme() {
        return new multiplicacionVectores_resultStandardScheme();
      }
    }

    private static class multiplicacionVectores_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<multiplicacionVectores_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, multiplicacionVectores_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Double>(_list48.size);
                  double _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = iprot.readDouble();
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // O_I
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oI = new operacionInvalida();
                struct.oI.read(iprot);
                struct.setOIIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, multiplicacionVectores_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (double _iter51 : struct.success)
            {
              oprot.writeDouble(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.oI != null) {
          oprot.writeFieldBegin(O_I_FIELD_DESC);
          struct.oI.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class multiplicacionVectores_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public multiplicacionVectores_resultTupleScheme getScheme() {
        return new multiplicacionVectores_resultTupleScheme();
      }
    }

    private static class multiplicacionVectores_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<multiplicacionVectores_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, multiplicacionVectores_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOI()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (double _iter52 : struct.success)
            {
              oprot.writeDouble(_iter52);
            }
          }
        }
        if (struct.isSetOI()) {
          struct.oI.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, multiplicacionVectores_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new java.util.ArrayList<Double>(_list53.size);
            double _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = iprot.readDouble();
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oI = new operacionInvalida();
          struct.oI.read(iprot);
          struct.setOIIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class divisionVectores_args implements org.apache.thrift.TBase<divisionVectores_args, divisionVectores_args._Fields>, java.io.Serializable, Cloneable, Comparable<divisionVectores_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("divisionVectores_args");

    private static final org.apache.thrift.protocol.TField O_V_FIELD_DESC = new org.apache.thrift.protocol.TField("oV", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new divisionVectores_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new divisionVectores_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable operacionVectores oV; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      O_V((short)1, "oV");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // O_V
            return O_V;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.O_V, new org.apache.thrift.meta_data.FieldMetaData("oV", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, operacionVectores.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(divisionVectores_args.class, metaDataMap);
    }

    public divisionVectores_args() {
    }

    public divisionVectores_args(
      operacionVectores oV)
    {
      this();
      this.oV = oV;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public divisionVectores_args(divisionVectores_args other) {
      if (other.isSetOV()) {
        this.oV = new operacionVectores(other.oV);
      }
    }

    public divisionVectores_args deepCopy() {
      return new divisionVectores_args(this);
    }

    @Override
    public void clear() {
      this.oV = null;
    }

    @org.apache.thrift.annotation.Nullable
    public operacionVectores getOV() {
      return this.oV;
    }

    public divisionVectores_args setOV(@org.apache.thrift.annotation.Nullable operacionVectores oV) {
      this.oV = oV;
      return this;
    }

    public void unsetOV() {
      this.oV = null;
    }

    /** Returns true if field oV is set (has been assigned a value) and false otherwise */
    public boolean isSetOV() {
      return this.oV != null;
    }

    public void setOVIsSet(boolean value) {
      if (!value) {
        this.oV = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case O_V:
        if (value == null) {
          unsetOV();
        } else {
          setOV((operacionVectores)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case O_V:
        return getOV();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case O_V:
        return isSetOV();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof divisionVectores_args)
        return this.equals((divisionVectores_args)that);
      return false;
    }

    public boolean equals(divisionVectores_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_oV = true && this.isSetOV();
      boolean that_present_oV = true && that.isSetOV();
      if (this_present_oV || that_present_oV) {
        if (!(this_present_oV && that_present_oV))
          return false;
        if (!this.oV.equals(that.oV))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetOV()) ? 131071 : 524287);
      if (isSetOV())
        hashCode = hashCode * 8191 + oV.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(divisionVectores_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOV()).compareTo(other.isSetOV());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOV()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oV, other.oV);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("divisionVectores_args(");
      boolean first = true;

      sb.append("oV:");
      if (this.oV == null) {
        sb.append("null");
      } else {
        sb.append(this.oV);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (oV != null) {
        oV.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class divisionVectores_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public divisionVectores_argsStandardScheme getScheme() {
        return new divisionVectores_argsStandardScheme();
      }
    }

    private static class divisionVectores_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<divisionVectores_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, divisionVectores_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // O_V
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oV = new operacionVectores();
                struct.oV.read(iprot);
                struct.setOVIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, divisionVectores_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.oV != null) {
          oprot.writeFieldBegin(O_V_FIELD_DESC);
          struct.oV.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class divisionVectores_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public divisionVectores_argsTupleScheme getScheme() {
        return new divisionVectores_argsTupleScheme();
      }
    }

    private static class divisionVectores_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<divisionVectores_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, divisionVectores_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetOV()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOV()) {
          struct.oV.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, divisionVectores_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.oV = new operacionVectores();
          struct.oV.read(iprot);
          struct.setOVIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class divisionVectores_result implements org.apache.thrift.TBase<divisionVectores_result, divisionVectores_result._Fields>, java.io.Serializable, Cloneable, Comparable<divisionVectores_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("divisionVectores_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField O_I_FIELD_DESC = new org.apache.thrift.protocol.TField("oI", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new divisionVectores_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new divisionVectores_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Double> success; // required
    public @org.apache.thrift.annotation.Nullable operacionInvalida oI; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      O_I((short)1, "oI");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // O_I
            return O_I;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      tmpMap.put(_Fields.O_I, new org.apache.thrift.meta_data.FieldMetaData("oI", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, operacionInvalida.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(divisionVectores_result.class, metaDataMap);
    }

    public divisionVectores_result() {
    }

    public divisionVectores_result(
      java.util.List<Double> success,
      operacionInvalida oI)
    {
      this();
      this.success = success;
      this.oI = oI;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public divisionVectores_result(divisionVectores_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Double> __this__success = new java.util.ArrayList<Double>(other.success);
        this.success = __this__success;
      }
      if (other.isSetOI()) {
        this.oI = new operacionInvalida(other.oI);
      }
    }

    public divisionVectores_result deepCopy() {
      return new divisionVectores_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oI = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Double> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(double elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Double>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Double> getSuccess() {
      return this.success;
    }

    public divisionVectores_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public operacionInvalida getOI() {
      return this.oI;
    }

    public divisionVectores_result setOI(@org.apache.thrift.annotation.Nullable operacionInvalida oI) {
      this.oI = oI;
      return this;
    }

    public void unsetOI() {
      this.oI = null;
    }

    /** Returns true if field oI is set (has been assigned a value) and false otherwise */
    public boolean isSetOI() {
      return this.oI != null;
    }

    public void setOIIsSet(boolean value) {
      if (!value) {
        this.oI = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Double>)value);
        }
        break;

      case O_I:
        if (value == null) {
          unsetOI();
        } else {
          setOI((operacionInvalida)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case O_I:
        return getOI();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case O_I:
        return isSetOI();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof divisionVectores_result)
        return this.equals((divisionVectores_result)that);
      return false;
    }

    public boolean equals(divisionVectores_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oI = true && this.isSetOI();
      boolean that_present_oI = true && that.isSetOI();
      if (this_present_oI || that_present_oI) {
        if (!(this_present_oI && that_present_oI))
          return false;
        if (!this.oI.equals(that.oI))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetOI()) ? 131071 : 524287);
      if (isSetOI())
        hashCode = hashCode * 8191 + oI.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(divisionVectores_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOI()).compareTo(other.isSetOI());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOI()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oI, other.oI);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("divisionVectores_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oI:");
      if (this.oI == null) {
        sb.append("null");
      } else {
        sb.append(this.oI);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class divisionVectores_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public divisionVectores_resultStandardScheme getScheme() {
        return new divisionVectores_resultStandardScheme();
      }
    }

    private static class divisionVectores_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<divisionVectores_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, divisionVectores_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Double>(_list56.size);
                  double _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = iprot.readDouble();
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // O_I
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oI = new operacionInvalida();
                struct.oI.read(iprot);
                struct.setOIIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, divisionVectores_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (double _iter59 : struct.success)
            {
              oprot.writeDouble(_iter59);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.oI != null) {
          oprot.writeFieldBegin(O_I_FIELD_DESC);
          struct.oI.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class divisionVectores_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public divisionVectores_resultTupleScheme getScheme() {
        return new divisionVectores_resultTupleScheme();
      }
    }

    private static class divisionVectores_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<divisionVectores_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, divisionVectores_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOI()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (double _iter60 : struct.success)
            {
              oprot.writeDouble(_iter60);
            }
          }
        }
        if (struct.isSetOI()) {
          struct.oI.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, divisionVectores_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new java.util.ArrayList<Double>(_list61.size);
            double _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = iprot.readDouble();
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oI = new operacionInvalida();
          struct.oI.read(iprot);
          struct.setOIIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ecuacionCuadratica_args implements org.apache.thrift.TBase<ecuacionCuadratica_args, ecuacionCuadratica_args._Fields>, java.io.Serializable, Cloneable, Comparable<ecuacionCuadratica_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ecuacionCuadratica_args");

    private static final org.apache.thrift.protocol.TField SG_FIELD_DESC = new org.apache.thrift.protocol.TField("sg", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ecuacionCuadratica_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ecuacionCuadratica_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable segundoGrado sg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SG((short)1, "sg");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SG
            return SG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SG, new org.apache.thrift.meta_data.FieldMetaData("sg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, segundoGrado.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ecuacionCuadratica_args.class, metaDataMap);
    }

    public ecuacionCuadratica_args() {
    }

    public ecuacionCuadratica_args(
      segundoGrado sg)
    {
      this();
      this.sg = sg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ecuacionCuadratica_args(ecuacionCuadratica_args other) {
      if (other.isSetSg()) {
        this.sg = new segundoGrado(other.sg);
      }
    }

    public ecuacionCuadratica_args deepCopy() {
      return new ecuacionCuadratica_args(this);
    }

    @Override
    public void clear() {
      this.sg = null;
    }

    @org.apache.thrift.annotation.Nullable
    public segundoGrado getSg() {
      return this.sg;
    }

    public ecuacionCuadratica_args setSg(@org.apache.thrift.annotation.Nullable segundoGrado sg) {
      this.sg = sg;
      return this;
    }

    public void unsetSg() {
      this.sg = null;
    }

    /** Returns true if field sg is set (has been assigned a value) and false otherwise */
    public boolean isSetSg() {
      return this.sg != null;
    }

    public void setSgIsSet(boolean value) {
      if (!value) {
        this.sg = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SG:
        if (value == null) {
          unsetSg();
        } else {
          setSg((segundoGrado)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SG:
        return getSg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SG:
        return isSetSg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ecuacionCuadratica_args)
        return this.equals((ecuacionCuadratica_args)that);
      return false;
    }

    public boolean equals(ecuacionCuadratica_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sg = true && this.isSetSg();
      boolean that_present_sg = true && that.isSetSg();
      if (this_present_sg || that_present_sg) {
        if (!(this_present_sg && that_present_sg))
          return false;
        if (!this.sg.equals(that.sg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSg()) ? 131071 : 524287);
      if (isSetSg())
        hashCode = hashCode * 8191 + sg.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ecuacionCuadratica_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSg()).compareTo(other.isSetSg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sg, other.sg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ecuacionCuadratica_args(");
      boolean first = true;

      sb.append("sg:");
      if (this.sg == null) {
        sb.append("null");
      } else {
        sb.append(this.sg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sg != null) {
        sg.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ecuacionCuadratica_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ecuacionCuadratica_argsStandardScheme getScheme() {
        return new ecuacionCuadratica_argsStandardScheme();
      }
    }

    private static class ecuacionCuadratica_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ecuacionCuadratica_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ecuacionCuadratica_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sg = new segundoGrado();
                struct.sg.read(iprot);
                struct.setSgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ecuacionCuadratica_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sg != null) {
          oprot.writeFieldBegin(SG_FIELD_DESC);
          struct.sg.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ecuacionCuadratica_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ecuacionCuadratica_argsTupleScheme getScheme() {
        return new ecuacionCuadratica_argsTupleScheme();
      }
    }

    private static class ecuacionCuadratica_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ecuacionCuadratica_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ecuacionCuadratica_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSg()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSg()) {
          struct.sg.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ecuacionCuadratica_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sg = new segundoGrado();
          struct.sg.read(iprot);
          struct.setSgIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ecuacionCuadratica_result implements org.apache.thrift.TBase<ecuacionCuadratica_result, ecuacionCuadratica_result._Fields>, java.io.Serializable, Cloneable, Comparable<ecuacionCuadratica_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ecuacionCuadratica_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField O_I_FIELD_DESC = new org.apache.thrift.protocol.TField("oI", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ecuacionCuadratica_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ecuacionCuadratica_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Double> success; // required
    public @org.apache.thrift.annotation.Nullable operacionInvalida oI; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      O_I((short)1, "oI");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // O_I
            return O_I;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      tmpMap.put(_Fields.O_I, new org.apache.thrift.meta_data.FieldMetaData("oI", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, operacionInvalida.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ecuacionCuadratica_result.class, metaDataMap);
    }

    public ecuacionCuadratica_result() {
    }

    public ecuacionCuadratica_result(
      java.util.List<Double> success,
      operacionInvalida oI)
    {
      this();
      this.success = success;
      this.oI = oI;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ecuacionCuadratica_result(ecuacionCuadratica_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Double> __this__success = new java.util.ArrayList<Double>(other.success);
        this.success = __this__success;
      }
      if (other.isSetOI()) {
        this.oI = new operacionInvalida(other.oI);
      }
    }

    public ecuacionCuadratica_result deepCopy() {
      return new ecuacionCuadratica_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.oI = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Double> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(double elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Double>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Double> getSuccess() {
      return this.success;
    }

    public ecuacionCuadratica_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public operacionInvalida getOI() {
      return this.oI;
    }

    public ecuacionCuadratica_result setOI(@org.apache.thrift.annotation.Nullable operacionInvalida oI) {
      this.oI = oI;
      return this;
    }

    public void unsetOI() {
      this.oI = null;
    }

    /** Returns true if field oI is set (has been assigned a value) and false otherwise */
    public boolean isSetOI() {
      return this.oI != null;
    }

    public void setOIIsSet(boolean value) {
      if (!value) {
        this.oI = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Double>)value);
        }
        break;

      case O_I:
        if (value == null) {
          unsetOI();
        } else {
          setOI((operacionInvalida)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case O_I:
        return getOI();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case O_I:
        return isSetOI();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ecuacionCuadratica_result)
        return this.equals((ecuacionCuadratica_result)that);
      return false;
    }

    public boolean equals(ecuacionCuadratica_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_oI = true && this.isSetOI();
      boolean that_present_oI = true && that.isSetOI();
      if (this_present_oI || that_present_oI) {
        if (!(this_present_oI && that_present_oI))
          return false;
        if (!this.oI.equals(that.oI))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetOI()) ? 131071 : 524287);
      if (isSetOI())
        hashCode = hashCode * 8191 + oI.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ecuacionCuadratica_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOI()).compareTo(other.isSetOI());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOI()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oI, other.oI);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ecuacionCuadratica_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oI:");
      if (this.oI == null) {
        sb.append("null");
      } else {
        sb.append(this.oI);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ecuacionCuadratica_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ecuacionCuadratica_resultStandardScheme getScheme() {
        return new ecuacionCuadratica_resultStandardScheme();
      }
    }

    private static class ecuacionCuadratica_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ecuacionCuadratica_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ecuacionCuadratica_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Double>(_list64.size);
                  double _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = iprot.readDouble();
                    struct.success.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // O_I
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oI = new operacionInvalida();
                struct.oI.read(iprot);
                struct.setOIIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ecuacionCuadratica_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (double _iter67 : struct.success)
            {
              oprot.writeDouble(_iter67);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.oI != null) {
          oprot.writeFieldBegin(O_I_FIELD_DESC);
          struct.oI.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ecuacionCuadratica_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ecuacionCuadratica_resultTupleScheme getScheme() {
        return new ecuacionCuadratica_resultTupleScheme();
      }
    }

    private static class ecuacionCuadratica_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ecuacionCuadratica_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ecuacionCuadratica_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOI()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (double _iter68 : struct.success)
            {
              oprot.writeDouble(_iter68);
            }
          }
        }
        if (struct.isSetOI()) {
          struct.oI.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ecuacionCuadratica_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new java.util.ArrayList<Double>(_list69.size);
            double _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = iprot.readDouble();
              struct.success.add(_elem70);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oI = new operacionInvalida();
          struct.oI.read(iprot);
          struct.setOIIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class operacionCombinada_args implements org.apache.thrift.TBase<operacionCombinada_args, operacionCombinada_args._Fields>, java.io.Serializable, Cloneable, Comparable<operacionCombinada_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("operacionCombinada_args");

    private static final org.apache.thrift.protocol.TField CB_FIELD_DESC = new org.apache.thrift.protocol.TField("cb", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new operacionCombinada_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new operacionCombinada_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable combinada cb; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CB((short)1, "cb");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CB
            return CB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CB, new org.apache.thrift.meta_data.FieldMetaData("cb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, combinada.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(operacionCombinada_args.class, metaDataMap);
    }

    public operacionCombinada_args() {
    }

    public operacionCombinada_args(
      combinada cb)
    {
      this();
      this.cb = cb;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public operacionCombinada_args(operacionCombinada_args other) {
      if (other.isSetCb()) {
        this.cb = new combinada(other.cb);
      }
    }

    public operacionCombinada_args deepCopy() {
      return new operacionCombinada_args(this);
    }

    @Override
    public void clear() {
      this.cb = null;
    }

    @org.apache.thrift.annotation.Nullable
    public combinada getCb() {
      return this.cb;
    }

    public operacionCombinada_args setCb(@org.apache.thrift.annotation.Nullable combinada cb) {
      this.cb = cb;
      return this;
    }

    public void unsetCb() {
      this.cb = null;
    }

    /** Returns true if field cb is set (has been assigned a value) and false otherwise */
    public boolean isSetCb() {
      return this.cb != null;
    }

    public void setCbIsSet(boolean value) {
      if (!value) {
        this.cb = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case CB:
        if (value == null) {
          unsetCb();
        } else {
          setCb((combinada)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CB:
        return getCb();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CB:
        return isSetCb();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof operacionCombinada_args)
        return this.equals((operacionCombinada_args)that);
      return false;
    }

    public boolean equals(operacionCombinada_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cb = true && this.isSetCb();
      boolean that_present_cb = true && that.isSetCb();
      if (this_present_cb || that_present_cb) {
        if (!(this_present_cb && that_present_cb))
          return false;
        if (!this.cb.equals(that.cb))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCb()) ? 131071 : 524287);
      if (isSetCb())
        hashCode = hashCode * 8191 + cb.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(operacionCombinada_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCb()).compareTo(other.isSetCb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cb, other.cb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("operacionCombinada_args(");
      boolean first = true;

      sb.append("cb:");
      if (this.cb == null) {
        sb.append("null");
      } else {
        sb.append(this.cb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cb != null) {
        cb.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class operacionCombinada_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public operacionCombinada_argsStandardScheme getScheme() {
        return new operacionCombinada_argsStandardScheme();
      }
    }

    private static class operacionCombinada_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<operacionCombinada_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, operacionCombinada_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cb = new combinada();
                struct.cb.read(iprot);
                struct.setCbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, operacionCombinada_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cb != null) {
          oprot.writeFieldBegin(CB_FIELD_DESC);
          struct.cb.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class operacionCombinada_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public operacionCombinada_argsTupleScheme getScheme() {
        return new operacionCombinada_argsTupleScheme();
      }
    }

    private static class operacionCombinada_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<operacionCombinada_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, operacionCombinada_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCb()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCb()) {
          struct.cb.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, operacionCombinada_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cb = new combinada();
          struct.cb.read(iprot);
          struct.setCbIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class operacionCombinada_result implements org.apache.thrift.TBase<operacionCombinada_result, operacionCombinada_result._Fields>, java.io.Serializable, Cloneable, Comparable<operacionCombinada_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("operacionCombinada_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);
    private static final org.apache.thrift.protocol.TField O_I_FIELD_DESC = new org.apache.thrift.protocol.TField("oI", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new operacionCombinada_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new operacionCombinada_resultTupleSchemeFactory();

    public double success; // required
    public @org.apache.thrift.annotation.Nullable operacionInvalida oI; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      O_I((short)1, "oI");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // O_I
            return O_I;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.O_I, new org.apache.thrift.meta_data.FieldMetaData("oI", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, operacionInvalida.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(operacionCombinada_result.class, metaDataMap);
    }

    public operacionCombinada_result() {
    }

    public operacionCombinada_result(
      double success,
      operacionInvalida oI)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.oI = oI;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public operacionCombinada_result(operacionCombinada_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetOI()) {
        this.oI = new operacionInvalida(other.oI);
      }
    }

    public operacionCombinada_result deepCopy() {
      return new operacionCombinada_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
      this.oI = null;
    }

    public double getSuccess() {
      return this.success;
    }

    public operacionCombinada_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public operacionInvalida getOI() {
      return this.oI;
    }

    public operacionCombinada_result setOI(@org.apache.thrift.annotation.Nullable operacionInvalida oI) {
      this.oI = oI;
      return this;
    }

    public void unsetOI() {
      this.oI = null;
    }

    /** Returns true if field oI is set (has been assigned a value) and false otherwise */
    public boolean isSetOI() {
      return this.oI != null;
    }

    public void setOIIsSet(boolean value) {
      if (!value) {
        this.oI = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      case O_I:
        if (value == null) {
          unsetOI();
        } else {
          setOI((operacionInvalida)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case O_I:
        return getOI();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case O_I:
        return isSetOI();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof operacionCombinada_result)
        return this.equals((operacionCombinada_result)that);
      return false;
    }

    public boolean equals(operacionCombinada_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_oI = true && this.isSetOI();
      boolean that_present_oI = true && that.isSetOI();
      if (this_present_oI || that_present_oI) {
        if (!(this_present_oI && that_present_oI))
          return false;
        if (!this.oI.equals(that.oI))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      hashCode = hashCode * 8191 + ((isSetOI()) ? 131071 : 524287);
      if (isSetOI())
        hashCode = hashCode * 8191 + oI.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(operacionCombinada_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOI()).compareTo(other.isSetOI());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOI()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oI, other.oI);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("operacionCombinada_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("oI:");
      if (this.oI == null) {
        sb.append("null");
      } else {
        sb.append(this.oI);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class operacionCombinada_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public operacionCombinada_resultStandardScheme getScheme() {
        return new operacionCombinada_resultStandardScheme();
      }
    }

    private static class operacionCombinada_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<operacionCombinada_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, operacionCombinada_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // O_I
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.oI = new operacionInvalida();
                struct.oI.read(iprot);
                struct.setOIIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, operacionCombinada_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.oI != null) {
          oprot.writeFieldBegin(O_I_FIELD_DESC);
          struct.oI.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class operacionCombinada_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public operacionCombinada_resultTupleScheme getScheme() {
        return new operacionCombinada_resultTupleScheme();
      }
    }

    private static class operacionCombinada_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<operacionCombinada_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, operacionCombinada_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOI()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
        if (struct.isSetOI()) {
          struct.oI.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, operacionCombinada_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oI = new operacionInvalida();
          struct.oI.read(iprot);
          struct.setOIIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
