/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CALCULADORA_H_RPCGEN
#define _CALCULADORA_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#define MAXIMO 255

struct operandoBasico {
	double a;
	double b;
};
typedef struct operandoBasico operandoBasico;

struct Num {
	struct {
		u_int numeros_len;
		double *numeros_val;
	} numeros;
};
typedef struct Num Num;

struct Ope {
	struct {
		u_int operandos_len;
		char *operandos_val;
	} operandos;
};
typedef struct Ope Ope;

struct vec {
	struct {
		u_int v_len;
		double *v_val;
	} v;
};
typedef struct vec vec;

struct combinada_2_argument {
	Num arg1;
	Ope arg2;
};
typedef struct combinada_2_argument combinada_2_argument;

struct sumavector_3_argument {
	vec arg1;
	vec arg2;
};
typedef struct sumavector_3_argument sumavector_3_argument;

struct restavector_3_argument {
	vec arg1;
	vec arg2;
};
typedef struct restavector_3_argument restavector_3_argument;

struct multiplicarvector_3_argument {
	vec arg1;
	vec arg2;
};
typedef struct multiplicarvector_3_argument multiplicarvector_3_argument;

struct dividirvector_3_argument {
	vec arg1;
	vec arg2;
};
typedef struct dividirvector_3_argument dividirvector_3_argument;

struct escalar_3_argument {
	vec arg1;
	vec arg2;
};
typedef struct escalar_3_argument escalar_3_argument;

struct ecuacioncuadratica_4_argument {
	double arg1;
	double arg2;
	double arg3;
};
typedef struct ecuacioncuadratica_4_argument ecuacioncuadratica_4_argument;

#define CALCULADORA 0x20000011
#define CV1 1

#if defined(__STDC__) || defined(__cplusplus)
#define SUMAR 1
extern  double * sumar_1(operandoBasico , CLIENT *);
extern  double * sumar_1_svc(operandoBasico , struct svc_req *);
#define RESTAR 2
extern  double * restar_1(operandoBasico , CLIENT *);
extern  double * restar_1_svc(operandoBasico , struct svc_req *);
#define DIVISION 3
extern  double * division_1(operandoBasico , CLIENT *);
extern  double * division_1_svc(operandoBasico , struct svc_req *);
#define MULTIPLICAR 4
extern  double * multiplicar_1(operandoBasico , CLIENT *);
extern  double * multiplicar_1_svc(operandoBasico , struct svc_req *);
extern int calculadora_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define SUMAR 1
extern  double * sumar_1();
extern  double * sumar_1_svc();
#define RESTAR 2
extern  double * restar_1();
extern  double * restar_1_svc();
#define DIVISION 3
extern  double * division_1();
extern  double * division_1_svc();
#define MULTIPLICAR 4
extern  double * multiplicar_1();
extern  double * multiplicar_1_svc();
extern int calculadora_1_freeresult ();
#endif /* K&R C */
#define CV2 2

#if defined(__STDC__) || defined(__cplusplus)
#define Combinada 5
extern  double * combinada_2(Num , Ope , CLIENT *);
extern  double * combinada_2_svc(Num , Ope , struct svc_req *);
extern int calculadora_2_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define Combinada 5
extern  double * combinada_2();
extern  double * combinada_2_svc();
extern int calculadora_2_freeresult ();
#endif /* K&R C */
#define CV3 3

#if defined(__STDC__) || defined(__cplusplus)
#define SUMAVECTOR 6
extern  vec * sumavector_3(vec , vec , CLIENT *);
extern  vec * sumavector_3_svc(vec , vec , struct svc_req *);
#define RESTAVECTOR 7
extern  vec * restavector_3(vec , vec , CLIENT *);
extern  vec * restavector_3_svc(vec , vec , struct svc_req *);
#define MULTIPLICARVECTOR 8
extern  vec * multiplicarvector_3(vec , vec , CLIENT *);
extern  vec * multiplicarvector_3_svc(vec , vec , struct svc_req *);
#define DIVIDIRVECTOR 9
extern  vec * dividirvector_3(vec , vec , CLIENT *);
extern  vec * dividirvector_3_svc(vec , vec , struct svc_req *);
#define ESCALAR 10
extern  double * escalar_3(vec , vec , CLIENT *);
extern  double * escalar_3_svc(vec , vec , struct svc_req *);
extern int calculadora_3_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define SUMAVECTOR 6
extern  vec * sumavector_3();
extern  vec * sumavector_3_svc();
#define RESTAVECTOR 7
extern  vec * restavector_3();
extern  vec * restavector_3_svc();
#define MULTIPLICARVECTOR 8
extern  vec * multiplicarvector_3();
extern  vec * multiplicarvector_3_svc();
#define DIVIDIRVECTOR 9
extern  vec * dividirvector_3();
extern  vec * dividirvector_3_svc();
#define ESCALAR 10
extern  double * escalar_3();
extern  double * escalar_3_svc();
extern int calculadora_3_freeresult ();
#endif /* K&R C */
#define CV4 4

#if defined(__STDC__) || defined(__cplusplus)
#define ECUACIONCUADRATICA 11
extern  vec * ecuacioncuadratica_4(double , double , double , CLIENT *);
extern  vec * ecuacioncuadratica_4_svc(double , double , double , struct svc_req *);
extern int calculadora_4_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define ECUACIONCUADRATICA 11
extern  vec * ecuacioncuadratica_4();
extern  vec * ecuacioncuadratica_4_svc();
extern int calculadora_4_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_operandoBasico (XDR *, operandoBasico*);
extern  bool_t xdr_Num (XDR *, Num*);
extern  bool_t xdr_Ope (XDR *, Ope*);
extern  bool_t xdr_vec (XDR *, vec*);
extern  bool_t xdr_combinada_2_argument (XDR *, combinada_2_argument*);
extern  bool_t xdr_sumavector_3_argument (XDR *, sumavector_3_argument*);
extern  bool_t xdr_restavector_3_argument (XDR *, restavector_3_argument*);
extern  bool_t xdr_multiplicarvector_3_argument (XDR *, multiplicarvector_3_argument*);
extern  bool_t xdr_dividirvector_3_argument (XDR *, dividirvector_3_argument*);
extern  bool_t xdr_escalar_3_argument (XDR *, escalar_3_argument*);
extern  bool_t xdr_ecuacioncuadratica_4_argument (XDR *, ecuacioncuadratica_4_argument*);

#else /* K&R C */
extern bool_t xdr_operandoBasico ();
extern bool_t xdr_Num ();
extern bool_t xdr_Ope ();
extern bool_t xdr_vec ();
extern bool_t xdr_combinada_2_argument ();
extern bool_t xdr_sumavector_3_argument ();
extern bool_t xdr_restavector_3_argument ();
extern bool_t xdr_multiplicarvector_3_argument ();
extern bool_t xdr_dividirvector_3_argument ();
extern bool_t xdr_escalar_3_argument ();
extern bool_t xdr_ecuacioncuadratica_4_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CALCULADORA_H_RPCGEN */
